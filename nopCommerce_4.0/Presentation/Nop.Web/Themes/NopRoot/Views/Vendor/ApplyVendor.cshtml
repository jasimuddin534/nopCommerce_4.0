@model ApplyVendorModel
@using Nop.Web.Models.Vendors;
@{
    Layout = "_ColumnsThree";

    //title
    Html.AddTitleParts(T("PageTitle.Vendors.Apply").Text);
}
<div class="page apply-vendor-page panel panel-default form-panel">
    <div class="page-title panel-title">
        <h1>@T("PageTitle.Vendors.Apply")</h1>
    </div>
    <div class="page-body panel-body">
        @await Component.InvokeAsync("TopicBlock", new { systemName = "ApplyVendor" })
        @await Component.InvokeAsync("Widget", new { widgetZone = "applyvendor_top" })
        @if (Model.DisableFormInput)
        {
            <div class="result">
                @Model.Result
            </div>
        }
        else
        {
            using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                
                <div asp-validation-summary="ModelOnly" class="message-error"></div>
                <div class="fieldset">
                    <div class="form-fields">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Name)
                            @Html.TextBoxFor(model => model.Name, new { @class = "name form-control", placeholder = T("Vendors.ApplyAccount.Name.Hint") })
                            <nop-required />
                            @Html.ValidationMessageFor(model => model.Name)
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Email)
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control", placeholder = T("Vendors.ApplyAccount.Email.Hint") })
                            <nop-required />
                            @Html.ValidationMessageFor(model => model.Email)
                        </div>
                        @if (Model.DisplayCaptcha)
                        {
                            <div class="captcha-box">
                                @Html.Raw(Html.GenerateCaptcha())
                            </div>
                        }
                    </div>
                </div>
                <div class="buttons">
                    <input type="submit" name="send-email" class="button-1 apply-vendor-button btn btn-default" value="@T("Vendors.ApplyAccount.Button")" />
                </div>
            }
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = "applyvendor_bottom" })
    </div>
</div>

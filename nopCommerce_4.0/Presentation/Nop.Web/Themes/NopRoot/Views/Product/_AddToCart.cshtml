@model ProductDetailsModel.AddToCartModel
@using Nop.Core.Domain.Orders
<div class="add-to-cart">
    @if (Model.UpdatedShoppingCartItemId > 0)
    {
        <input asp-for="UpdatedShoppingCartItemId" type="hidden" />
    }
    @if (Model.CustomerEntersPrice)
    {
        
        <div class="customer-entered-price">
            <div class="price-input form-group row">
                <div class="col-md-6 paddding-right0">
                    <label asp-for="CustomerEnteredPrice" asp-postfix=":" class="enter-price-label"></label>
                    @*round price*@
                </div>
                <div class="col-md-4 paddding-left0">
                    @*round price*@
                    <input asp-for="CustomerEnteredPrice" value="@Convert.ToInt32(Math.Ceiling(Model.CustomerEnteredPrice))" class="eenter-price-input, form-control" />
                   
                </div>
            </div>
            <div class="price-range form-group row">
                <div class="col-md-12 text-info">
                    <strong>@Model.CustomerEnteredPriceRange</strong>    
                </div>
            </div>
        </div>
    }
    @if (!Model.DisableBuyButton || !Model.DisableWishlistButton)
    {
        
        <div class="add-to-cart-panel">
            <div class="form-group row">
                <div class="col-md-2">
                    @if (!string.IsNullOrEmpty(Model.MinimumQuantityNotification))
                    {
                    <div class="min-qty-notification">@Model.MinimumQuantityNotification</div>
                    }
                    @*@Html.LabelFor(model => model.EnteredQuantity, new { @class = "qty-label" }, ":")*@
                     @*<label for="giftcard_1_Message">Quantity:</label>*@
                    <label asp-for="EnteredQuantity" asp-postfix=":" class="qty-label"></label>
                </div>
                @if (Model.AllowedQuantities.Count > 0)
                {
                    <div class="col-md-3">
                        <select asp-for="EnteredQuantity" asp-items="Model.AllowedQuantities" class="qty-dropdown form-control"></select>
                       
                    </div>
                }
                else
                {
                    <div class="col-md-3">
                        <input asp-for="EnteredQuantity" class="qty-input form-control" type="text" />
                        @*when a customer clicks 'Enter' button we submit the "add to cart" button (if visible)*@
                        <script type="text/javascript" asp-location="Footer">
                            $(document).ready(function() {
                                $("#@Html.IdFor(model => model.EnteredQuantity)").keydown(function(event) {
                                    if (event.keyCode == 13) {
                                        $("#add-to-cart-button-@Model.ProductId").click();
                                        return false;
                                    }
                                });
                            });
                        </script>
                        @*@Html.TextBoxFor(model => model.EnteredQuantity, new {@class = "qty-input form-control"})*@
                    </div>

                 
                    
                }
                
                @if (!Model.DisableBuyButton)
                {
                    
                    var addToCartText = "";
                    if (Model.UpdatedShoppingCartItemId > 0)
                    {
                        addToCartText = T("ShoppingCart.AddToCart.Update").Text;
                    }
                    else
                    {
                        addToCartText = Model.AvailableForPreOrder ? T("ShoppingCart.PreOrder").Text : T("ShoppingCart.AddToCart").Text;
                    }
                    <div class="col-md-3">
                        <button type="button" id="add-to-cart-button-@Model.ProductId" class="btn btn-default add-to-cart-button" data-productid="@Model.ProductId" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.ProductId, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart })', '#product-details-form');return false;"><i class="fa fa-shopping-cart fa-fw"></i> @addToCartText </button>
                    </div>
                }
            </div>
            @if (!Model.DisableWishlistButton && Model.UpdatedShoppingCartItemId == 0)
            {
                <div class="form-group row">
                    <div class="col-md-3">
                         <button type="button" id="add-to-wishlist-button-@Model.ProductId" class="btn btn-default add-to-wishlist-button " data-productid="@Model.ProductId" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.ProductId, shoppingCartTypeId = (int)ShoppingCartType.Wishlist })', '#product-details-form');return false;"><i class="fa fa-heart fa-fw"></i> @T("ShoppingCart.AddToWishlist") </button>
                    </div>
                </div>
            }
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_add_info", additionalData = Model.ProductId })
</div>


@model ProductDetailsModel
@using Microsoft.AspNetCore.Http.Extensions
@using Nop.Core.Domain.Seo;
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsTwo";

    //title, meta
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);



    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }


    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
    }
}
<!--product breadcrumb-->
@section Breadcrumb
    {
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}
@await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_breadcrumb", additionalData = Model.Id })
<div class="page product-details-page panel panel-default form-panel">

    <div class="panel-heading">
        <h3>@Model.Name</h3>
    </div>
    <div class="panel-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_top", additionalData = Model.Id })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <div class=" product-essential">
                    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_pictures", additionalData = Model.Id })
                  <!--product pictures-->
                    <div class="col-md-6">
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_pictures", additionalData = Model.Id })
                         @await Html.PartialAsync("_ProductDetailsPictures", Model)
                        @await Component.InvokeAsync("Widget", new {widgetZone = "productdetails_after_pictures", additionalData = Model.Id})
                    </div>

                    <div class="col-md-6 overview ">

                        @if (!String.IsNullOrEmpty(Model.ShortDescription))
                        {
                            <div class="short-description">
                                @Model.ShortDescription
                            </div>
                        }
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_overview_top", additionalData = Model.Id })
                        <!--product SKU, manufacturer part number, stock info-->
                        @await Html.PartialAsync("_SKU_Man_Stock", Model)
                        <!--Back in stock subscription-->
                        @await Html.PartialAsync("_BackInStockSubscription", Model)
                        <!--product manufacturers-->
                        @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                        <!--product reviews-->
                        @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                        <!--sample download-->
                        @await Html.PartialAsync("_DownloadSample", Model)
                        <!--attributes-->
                        @{
                            var dataDictAttributes = new ViewDataDictionary(ViewData);
                            dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                            @await Html.PartialAsync("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)
                        }
                        <!--gift card-->
                        @{
                            var dataDictGiftCard = new ViewDataDictionary(ViewData);
                            dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                            @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                        }
                        <!--rental info-->
                        @{
                            var dataDictRental = new ViewDataDictionary(ViewData);
                            dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                            @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                        }
                        <!--price & add to cart-->
                        @{
                            var dataDictPrice = new ViewDataDictionary(ViewData);
                            dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                            @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)

                            @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)

                            var dataDictAddToCart = new ViewDataDictionary(ViewData);
                            dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                            @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                        }
                        <div class="form-group row">
                            @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                            @await Html.PartialAsync("_CompareProductsButton", Model)

                        </div>
                        @await Html.PartialAsync("_ShareButton", Model)
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_overview_bottom", additionalData = Model.Id })
                    </div>


                    <div class="clearfix"></div>
                    <div id="tabs">
                        <ul class="nav nav-tabs">
                            @if (!String.IsNullOrEmpty(Model.FullDescription))
                            {

                                <li class="active"><a href="#description" data-toggle="tab">Description</a></li>
                            }
                            @if (Model.ProductSpecifications.Count > 0)
                            {

                                <li><a href="#specification" data-toggle="tab">Specifications</a></li>
                            }
                            @if (Model.ProductTags.Count > 0)
                            {
                                <li><a href="#tags" data-toggle="tab">Products Tags</a></li>
                            }
                        </ul>


                        <div class="tab-content">
                            @if (!String.IsNullOrEmpty(Model.FullDescription))
                            {
                                <div class="full-description tab-pane active" id="description" itemprop="description">
                                    @Html.Raw(Model.FullDescription)
                                </div>
                            }
                            @if (Model.ProductSpecifications.Count > 0)
                            {
                                <div class="full-description tab-pane" id="specification">
                                    @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                                </div>
                            }
                            @if (Model.ProductTags.Count > 0)
                            {
                                <div class="full-description tab-pane" id="tags">
                                    @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                                </div>
                            }
                        </div>
                    </div>
                   
                </div>




                @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_collateral", additionalData = Model.Id })
                @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
            </div>

       
        </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_bottom", additionalData = Model.Id })
    </div>
</div>

<div class="product-collateral">
    
    @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
    @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
</div>
<script>
  $( function() {
    $( "#tabs" ).tabs();
  } );
</script>
@model ProductReviewsModel
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(Model.ProductName);
    Html.AddTitleParts(T("PageTitle.ProductReviews").Text);
    //page class
    Html.AppendPageCssClassParts("html-product-reviews-page");
}
<div class="body_container p-1">
    <div class="container inner_page_body_container">

        <div class="row justify-content-center">
            <div class="col-md-push-4 col-md-9 col-sm-12">
                <div class="row theme-box-shadow p-3 px-4">
                    <div class="col-md-12 col-sm-9">
                        <div class="page product-reviews-page">
                            <div class="page-title">
                                <h3>@T("Reviews.ProductReviewsFor") <a href="@Url.RouteUrl("Product", new { SeName = Model.ProductSeName })">@Model.ProductName</a></h3>
                            </div>
                            <div class="page-body">
                                @await Component.InvokeAsync("Widget", new { widgetZone = "productreviews_page_top", additionalData = Model.ProductId })
                                @if (Model.AddProductReview.SuccessfullyAdded)
                                {
                                    <div class="result">
                                        @Model.AddProductReview.Result
                                    </div>
                                }
                                else
                                {
                                    <div class="write-review" id="review-form">
                                        <div class="title">
                                            <strong>@T("Reviews.Write")</strong>
                                        </div>
                                        <form asp-route="ProductReviews" method="post">
                                            <div asp-validation-summary="ModelOnly" class="message-error"></div>
                                            <div class="fieldset">
                                                <div class="form-fields">
                                                    <div class="form-group">
                                                        <label asp-for="AddProductReview.Title" asp-postfix=":"></label>
                                                        <div class="inputs">
                                                            <input asp-for="AddProductReview.Title" class="review-title" asp-disabled="@(!Model.AddProductReview.CanCurrentCustomerLeaveReview)" />
                                                            <nop-required />
                                                        </div>
                                                        <span asp-validation-for="AddProductReview.Title"></span>
                                                    </div>
                                                    <div class="form-group">
                                                        <label asp-for="AddProductReview.ReviewText" asp-postfix=":"></label>
                                                        <div class="inputs">
                                                            <textarea rows="3" asp-for="AddProductReview.ReviewText" class="review-text" asp-disabled="@(!Model.AddProductReview.CanCurrentCustomerLeaveReview)"></textarea>
                                                            <nop-required />
                                                        </div>
                                                        <span asp-validation-for="AddProductReview.ReviewText"></span>
                                                    </div>
                                                    <div class="review-rating list-inline my-3">
                                                        <label asp-for="AddProductReview.Rating" asp-postfix=":"></label>
                                                        <div class="d-flex align-items-center">
                                                            <div class="label first">@T("Reviews.Fields.Rating.Bad")</div>
                                                            <div class="rating-options d-flex align-items-center px-2">
                                                                <input class="custom_radio" asp-for="AddProductReview.Rating" value="1" type="radio" id="addproductrating_1" />
                                                                <label class="mb-0" for="addproductrating_1">&nbsp;</label>

                                                                <input class="custom_radio" asp-for="AddProductReview.Rating" value="2" type="radio" id="addproductrating_2" />
                                                                <label class="mb-0" for="addproductrating_2">&nbsp;</label>
                                                                <input class="custom_radio" asp-for="AddProductReview.Rating" value="3" type="radio" id="addproductrating_3" />
                                                                <label class="mb-0" for="addproductrating_3">&nbsp;</label>
                                                                <input class="custom_radio" asp-for="AddProductReview.Rating" value="4" type="radio" id="addproductrating_4" />
                                                                <label class="mb-0" for="addproductrating_4">&nbsp;</label>
                                                                <input class="custom_radio" asp-for="AddProductReview.Rating" value="5" type="radio" id="addproductrating_5" />
                                                                <label class="mb-0" for="addproductrating_5">&nbsp;</label>
                                                            </div>
                                                            <div class="label last">@T("Reviews.Fields.Rating.Excellent")</div>
                                                        </div>
                                                    </div>
                                                    @if (Model.AddProductReview.DisplayCaptcha)
                                                    {
                                                        <div class="captcha-box">
                                                            <nop-captcha />
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                            <div class="buttons">
                                                <input type="submit" name="add-review" class=" write-product-review-button theme-button" value="@T("Reviews.SubmitButton")" />
                                            </div>
                                        </form>
                                    </div>
                                }
                                @if (Model.Items.Count > 0)
                                {
                                    <div class="product-review-list">
                                        <div class="title">
                                            <strong>@T("Reviews.ExistingReviews")</strong>
                                        </div>
                                        @foreach (var review in Model.Items)
                                        {
                                            var ratingPercent = review.Rating * 20;
                                            <div class="product-review-item">
                                                <div class="review-item-head">
                                                    <div class="review-title">
                                                        <strong>@review.Title</strong>
                                                    </div>
                                                    <div class="product-review-box">
                                                        <div class="rating">
                                                            <div style="width: @(ratingPercent)%">
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="review-content">
                                                    <div class="review-text">
                                                        @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(review.ReviewText, false, true, false, false, false, false))
                                                    </div>
                                                    <div class="review-info">
                                                        <span class="user">
                                                            <label>@T("Reviews.From"):</label>
                                                            @if (review.AllowViewingProfiles)
                                                            {
                                                                <a href="@Url.RouteUrl("CustomerProfile", new { id = review.CustomerId })">@(review.CustomerName)</a>
                                                            }
                                                            else
                                                            {
                                                                @review.CustomerName
                                                            }
                                                        </span>
                                                        <span class="separator">|</span>
                                                        <span class="date">
                                                            <label>@T("Reviews.Date"):</label>
                                                            <span>@review.WrittenOnStr</span>
                                                        </span>
                                                    </div>
                                                    @await Html.PartialAsync("_ProductReviewHelpfulness", review.Helpfulness)
                                                    @await Component.InvokeAsync("Widget", new { widgetZone = "productreviews_page_inside_review", additionalData = review.Id })
                                                    @if (!string.IsNullOrEmpty(review.ReplyText))
                                                    {
                                                        <div class="reply">
                                                            <div class="reply-header">
                                                                @T("Reviews.Reply")
                                                            </div>
                                                            <div class="reply-text">
                                                                @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(review.ReplyText, false, true, false, false, false, false))
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                                @await Component.InvokeAsync("Widget", new { widgetZone = "productreviews_page_bottom", additionalData = Model.ProductId })
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
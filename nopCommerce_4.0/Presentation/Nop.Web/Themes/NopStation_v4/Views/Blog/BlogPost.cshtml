@model BlogPostModel
@{
    Layout = "_ColumnsTwoReversed";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-blogpost-page");
}
@section right {
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_blog_before" })
    @await Component.InvokeAsync("BlogMonths")
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after_blog_archive" })
    @await Component.InvokeAsync("BlogTags")
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_blog_after" })
}

@section heading {
            <h2 class="temporari-heading text-uppercase font-bold text-white">@Model.Title</h2>         
}
<div class="page blogpost-page">
    <div class="blog-container">
        <div class="page-body px-3">
            <div class="blog-body-content pb-3 mb-4 boder-bottom">
                @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_top", additionalData = Model.Id })
                <div class="blog-header">
                    <h4 class="m-0">@Model.Title</h4>
                </div>
                <div class="post-date">
                    <i class="mb-3 d-block"> @Model.CreatedOn.ToString("D")</i>
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_before_body", additionalData = Model.Id })
                <div class="post-body">
                    @Html.Raw(Model.Body)
                </div>
                @if (Model.Tags.Count > 0)
                {
                    <div class="tags">
                        <label>@T("Blog.Tags"):</label>
                        <ul>
                            @for (var i = 0; i < Model.Tags.Count; i++)
                            {
                                var tag = Model.Tags[i];
                                <li><a href="@Url.RouteUrl("BlogByTag", new {tag = tag})">@tag</a></li>
                                if (i != Model.Tags.Count - 1)
                                {
                                    <li class="separator">,</li>
                                }
                            }
                        </ul>
                    </div>
                }
                @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_before_comments", additionalData = Model.Id })
                @if (Model.AllowComments)
                {
                    <div class="fieldset new-commen" id="comments">
                        <div class="title">
                            <strong>@T("Blog.Comments.LeaveYourComment")</strong>
                        </div>
                        <div class="notifications">
                            <div asp-validation-summary="ModelOnly" class="message-error"></div>
                            @{
                                var result = TempData["nop.blog.addcomment.result"] as string;
                            }
                            @if (!string.IsNullOrEmpty(result))
                            {
                                <div class="result">@result</div>
                            }
                        </div>

                        <form asp-route="BlogPost" asp-route-sename="@Model.SeName" method="post">
                            <div class="form-fields">
                                <div class="inputs">
                                    <label class="sr-only" asp-for="AddNewComment.CommentText" asp-postfix=":"></label>
                                    <textarea asp-for="AddNewComment.CommentText" class="enter-comment-text w-100 p-2" placeholder="Your Comment ..."></textarea>
                                    <span asp-validation-for="AddNewComment.CommentText"></span>
                                </div>
                                @if (Model.AddNewComment.DisplayCaptcha)
                                {
                                    <div class="captcha-box">
                                        <nop-captcha />
                                    </div>
                                }
                            </div>
                            <div class="buttons see-all-products-button add_to_cart_button">
                                <input type="submit" name="add-comment" class="button-1 blog-post-add-comment-button checkout_button text-white font-bold text-uppercase" value="@T("Blog.Comments.SubmitButton")" />
                            </div>
                        </form>
                    </div>
                }
            </div>
            @if (Model.AllowComments)
            {

                if (Model.Comments.Count > 0)
                {
                    <div class="comment-list">
                        <p class="boder-bottom pb-2">
                            <strong>@T("Blog.Comments")</strong>
                        </p>
                        <div class="comments">
                            @foreach (var comment in Model.Comments)
                            {
                                <div class="comment blog-comment comments-box-body boder-bottom pb-3 pt-3">
                                    <div class="row">
                                        <div class="col-sm-2">
                                            <div class="user-thumbnail-wrapper">
                                                <div class="user-info">
                                                    @if (!string.IsNullOrEmpty(comment.CustomerAvatarUrl))
                                                    {
                                                        <div class="avatar">
                                                            @if (comment.AllowViewingProfiles)
                                                            {
                                                                <a href="@Url.RouteUrl("CustomerProfile", new {id = comment.CustomerId})" class="avatar-img-link">
                                                                    <img src="@(comment.CustomerAvatarUrl)" class="avatar-img" alt="avatar" />
                                                                </a>
                                                            }
                                                            else
                                                            {
                                                                <img src="@(comment.CustomerAvatarUrl)" class="avatar-img" alt="avatar" />
                                                            }
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-10">
                                            <div class="comment-content">
                                                @if (comment.AllowViewingProfiles)
                                                {
                                                    <a href="@Url.RouteUrl("CustomerProfile", new {id = comment.CustomerId})" class="username"><strong>@(comment.CustomerName)</strong></a>
                                                }
                                                else
                                                {
                                                    <strong class="username">@(comment.CustomerName)</strong>
                                                }
                                                <div class="comment-body">
                                                    @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(comment.CommentText, false, true, false, false, false, false))
                                                </div>
                                                <div class="comment-time">
                                                    <label><i>@T("Blog.Comments.CreatedOn"):</i></label>
                                                    <span class="stat-value"><i>@comment.CreatedOn.ToString("g")</i></span>
                                                </div>
                                            </div>
                                            @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_inside_comment", additionalData = comment.Id })

                                        </div>

                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
            @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_after_comments", additionalData = Model.Id })
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_bottom", additionalData = Model.Id })
    </div>
</div>

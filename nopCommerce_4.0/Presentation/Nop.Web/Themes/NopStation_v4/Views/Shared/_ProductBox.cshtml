@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
}
<div class="view overlay bg-white products_box" data-productid="@Model.Id">
    <div class="product-item">
        <div class="product_picture">
            <div class="picture view overlay hm-white-slight">
                <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})"> <img class="img-fluid w-100" alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" /></a>
</div>
        </div>
        <div class="product_description">
            <div class="details products_box_body">
                <h5 class="product-title text-uppercase products_title font-bold">
                    <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">@Model.Name</a>
                </h5>
                @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
                {
                    <div class="sku">
                         @Model.Sku
                    </div>
                }

                <p class="description card-text">
                     @Html.Raw(Model.ShortDescription)
                </p>
                @if (Model.ReviewOverviewModel.AllowCustomerReviews)
                {
                    var ratingPercent = 0;
                    if (Model.ReviewOverviewModel.TotalReviews != 0)
                    {
                        ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
                    }
                    <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                        <div class="rating">
                            <div style="width: @(ratingPercent)%">
                            </div>
                        </div>
                    </div>
                }
                <div class="add-info">
                    <div class="clearfix price-cart-wrapper">
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productbox_addinfo_before", additionalData = Model.Id })
                        <h5 class="prices font-bold fs">
                            @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                            {
                                <small class="price old-price">@Model.ProductPrice.OldPrice</small>
                            }
                            <span class="price actual-price">@Model.ProductPrice.Price</span>
                            @if (Model.ProductPrice.DisplayTaxShippingInfo)
                            {
                                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                                //of course, you can modify appropriate locales to include VAT info there
                                <span class="tax-shipping-info">
                                    @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                                </span>
                            }
                            @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                            {
                                <div class="base-price-pangv">
                                    @Model.ProductPrice.BasePricePAngV
                                </div>
                            }
                        </h5>
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productbox_addinfo_middle", additionalData = Model.Id })
                        <div class="buttons mask flex-center rgba-red-strong">
                            @*<input type="button" value="@T("Products.Details")" class="button-1 product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />*@
                            <p class="class=" white-text"">
                                @if (!Model.ProductPrice.DisableBuyButton)
                                {
                                    var addToCartText = T("ShoppingCart.AddToCart").Text;
                                    if (Model.ProductPrice.IsRental)
                                    {
                                        addToCartText = T("ShoppingCart.Rent").Text;
                                    }
                                    if (Model.ProductPrice.AvailableForPreOrder)
                                    {
                                        addToCartText = T("ShoppingCart.PreOrder").Text;
                                    }
                                    <a type="button" class="button-2 product-box-add-to-cart-button" href="#" role="button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;"><i class="fa fa-cart-plus bg-white"></i> </a>
                                }
                                <a data-toggle="modal" class="button-2 quick-view-button" data-target="#basicExampleModal-@Model.Id" title="QUICK VIEW" href="products_list.html"> <i class="fa fa-eye bg-white" aria-hidden="true"></i> </a>
                                @if (!Model.ProductPrice.DisableAddToCompareListButton)
                                {
                                    <a class="button-2 add-to-compare-list-button" href="#" role="button" title="@T("ShoppingCart.AddToCompareList")" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;"><i class="fa fa-adjust  bg-white" aria-hidden="true"></i></a>
                                }
                                @if (!Model.ProductPrice.DisableWishlistButton)
                                {
                                    <a type="button" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" href="#" role="button" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;"><i class="fa fa-heart-o bg-white" aria-hidden="true"></i></a>
                                }
                            </p>
                        </div>
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productbox_addinfo_after", additionalData = Model.Id })
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!------------ QUICK VIEW ------------>

<div class="modal fade quick-view-box" id="basicExampleModal-@Model.Id" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content border-0">

            <div class="modal-header border-0">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>


            <div class="row p-5">
                <div class="col-md-6 col-sm-6 gallery_left_container">
                    <div id="carousel-example-1z-@Model.Id" class="carousel slide carousel-fade" data-ride="carousel">
                        <ol class="carousel-indicators">
                            <li data-target="#carousel-example-1z-2" data-slide-to="0" class=""></li>
                            <li data-target="#carousel-example-1z-2" data-slide-to="1" class="active"></li>
                        </ol>

                        <div class="carousel-inner" role="listbox">
                            <div class="carousel-item">
                                <img class="d-block w-100 img-fluid" src="@Model.DefaultPictureModel.ImageUrl" alt="First slide">
                            </div>

                            <div class="carousel-item active">
                                <img class="d-block w-100 img-fluid" src="@Model.DefaultPictureModel.ImageUrl" alt="Third slide">
                            </div>
                        </div>

                        <a class="carousel-control-prev" href="#carousel-example-1z-@Model.Id" role="button" data-slide="prev">
                            <h2> <i class="fa fa-angle-left" aria-hidden="true"></i> </h2>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a class="carousel-control-next" href="#carousel-example-1z-@Model.Id" role="button" data-slide="next">
                            <h2> <i class="fa fa-angle-right" aria-hidden="true"></i> </h2>
                            <span class="sr-only">Next</span>
                        </a>

                    </div>
                </div>

                <div class="col-md-6 col-sm-6 products_right_container">
                    <h4 class="font-bold">@Model.Name</h4>
                    <p>
                        @if (Model.ReviewOverviewModel.AllowCustomerReviews)
                        {
                            var ratingPercent = 0;
                            if (Model.ReviewOverviewModel.TotalReviews != 0)
                            {
                                ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
                            }
                            <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                                <div class="rating">
                                    <div style="width: @(ratingPercent)%">
                                    </div>
                                </div>
                            </div>
                        }
                        (@(Model.ReviewOverviewModel.TotalReviews) reviews)  /  <a href="#"> Write a review</a>
                    </p>
                    <h2>@Model.ProductPrice.Price </h2>

                    <p>
                        <span class="font-bold text-uppercase d-block text-justify"> Short description</span>
                        @Html.Raw(Model.ShortDescription)
                    </p>

                    <p>
                        <span class="font-bold text-uppercase d-block"> Supported Versions</span>
                        nopCommerce <strong>3.50</strong>,
                        nopCommerce <strong>3.60 </strong>, nopCommerce <strong>3.70</strong>, nopCommerce <strong>4.00</strong>
                    </p>

                    <p class="font-bold text-uppercase">Availability :  <strong class="text-blue">In stock</strong>  </p>

                    <p class="see-all-products-button add_to_cart_button">
                        <a class="text-white font-bold text-uppercase" href="#" role="button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;"> <i class="fa fa-shopping-cart" aria-hidden="true"></i> add to cart </a>
                        <a class="text-white font-bold text-uppercase live_demo" href="#"> live demo </a>
                    </p>


                </div>

            </div>


        </div>
    </div>
</div>
<!------------ QUICK VIEW ------------>
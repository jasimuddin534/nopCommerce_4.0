@model NewsItemModel
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-news-item-page");
}
@section heading {
    <div class="page-title">
        <h2 class="text-white text-uppercase">News</h2>
    </div>

}
    <div class="page news-item-page">
        <div class="theme-box-shadow p-3 px-4">
            <div class="page-title">
                <h2 class="">@Model.Title</h2>
            </div>
            <div class="page-body">
                <div class="news-date">
                    <i> @Model.CreatedOn.ToString("D")</i>
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = "newsitem_page_before_body", additionalData = Model.Id })
                <div class="news-body  mb-4">
                    @Html.Raw(Model.Full)
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = "newsitem_page_before_comments", additionalData = Model.Id })
                @if (Model.AllowComments)
                {
                    <div class="fieldset new-comment mb-4" id="comments">
                        <div class="title">
                            <strong>@T("News.Comments.LeaveYourComment")</strong>
                        </div>
                        <div class="notifications">
                            <div asp-validation-summary="ModelOnly" class="message-error"></div>
                            @{
                                var result = TempData["nop.news.addcomment.result"] as string;
                            }
                            @if (!string.IsNullOrEmpty(result))
                            {
                                <div class="result">@result</div>
                            }
                        </div>
                        <form asp-route="NewsItem" asp-route-sename="@Model.SeName" method="post">
                            <div class="form-fields">
                                <div class="inputs">
                                    <label asp-for="AddNewComment.CommentTitle" asp-postfix=":"></label>
                                    <input class="theme-input-control" asp-for="AddNewComment.CommentTitle" class="enter-comment-title" />
                                    <span asp-validation-for="AddNewComment.CommentTitle"></span>
                                </div>
                                <div class="inputs">
                                    <label asp-for="AddNewComment.CommentText" asp-postfix=":"></label>
                                    <textarea rows="3" asp-for="AddNewComment.CommentText" class="enter-comment-text theme-input-control"></textarea>
                                    <span asp-validation-for="AddNewComment.CommentText"></span>
                                </div>
                                @if (Model.AddNewComment.DisplayCaptcha)
                                {
                                    <div class="captcha-box">
                                        <nop-captcha />
                                    </div>
                                }
                            </div>
                            <div class="buttons">
                                <input type="submit" name="add-comment" class="button-1 news-item-add-comment-button theme-button" value="@T("News.Comments.SubmitButton")" />
                            </div>
                        </form>
                    </div>
                    if (Model.Comments.Count > 0)
                    {
                        <div class="comment-list">
                            <div class="title mb-3">
                                <strong>@T("News.Comments"):</strong>
                            </div>
                            <div class="comments">
                                @foreach (var comment in Model.Comments)
                                {
                                <div class="comment news-comment theme-border mb-3">
                                    <div class="row no-gutters">
                                        <div class="col-md-3">
                                            <div class="comment-info">
                                                <div class="user-info p-2">
                                                    @if (comment.AllowViewingProfiles)
                                                    {
                                                        <a href="@Url.RouteUrl("CustomerProfile", new { id = comment.CustomerId })" class="username">@(comment.CustomerName)</a>
                                                    }
                                                    else
                                                    {
                                                        <span class="username">@(comment.CustomerName)</span>
                                                    }

                                                    @if (!string.IsNullOrEmpty(comment.CustomerAvatarUrl))
                                                    {
                                                        <div class="avatar">
                                                            @if (comment.AllowViewingProfiles)
                                                            {
                                                                <a href="@Url.RouteUrl("CustomerProfile", new { id = comment.CustomerId })" class="avatar-img-link">
                                                                    <img src="@(comment.CustomerAvatarUrl)" class="avatar-img" alt="avatar" />
                                                                </a>
                                                            }
                                                            else
                                                            {
                                                                <img src="@(comment.CustomerAvatarUrl)" class="avatar-img" alt="avatar" />
                                                            }
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-9">
                                            <div class="comment-content">
                                                <div class="comment-time p-2">
                                                    <label class="mb-0">@T("News.Comments.CreatedOn"):</label>
                                                    <span class="stat-value">@comment.CreatedOn.ToString("g")</span>
                                                </div>
                                                <div class="comment-title px-2">
                                                    <strong class="comment-text">@comment.CommentTitle</strong>
                                                </div>
                                                <div class="comment-body px-2">
                                                    <p class="comment-text">@Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(comment.CommentText, false, true, false, false, false, false))</p>
                                                </div>
                                            </div>
                                        </div>
                                        @await Component.InvokeAsync("Widget", new { widgetZone = "newsitem_page_inside_comment", additionalData = comment.Id })
                                    </div>
                                </div>
                                }
                            </div>
                        </div>
                    }
                }
                @await Component.InvokeAsync("Widget", new { widgetZone = "newsitem_page_after_comments", additionalData = Model.Id })
            </div>
        </div>
    </div>

@model Nop.Web.Models.Catalog.SearchModel
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.Search").Text);
    //page class
    Html.AppendPageCssClassParts("html-search-page");
}
<script type="text/javascript" asp-location="Footer">
    $(document).ready(function () {
        $("#@Html.IdFor(model => model.adv)").click(toggleAdvancedSearch);
        toggleAdvancedSearch();
    });

    function toggleAdvancedSearch() {
        if ($('#@Html.IdFor(model => model.adv)').is(':checked')) {
            $('#advanced-search-block').show();
        }
        else {
            $('#advanced-search-block').hide();
        }
    }
</script>
<div class="page search-page">

    <h2 class="title text-center">@T("Search")</h2>
    <div class="page-body">
        <div class="search-input">
            <form asp-route="ProductSearch" method="get">
                <fieldset class="fieldset">
                    <div class="form-fields">
                        <div class="basic-search">
                            <div class="form-group row">
                                <div class="col-md-3">
                                    <label asp-for="q">@T("Search.SearchTerm"):</label>
                                </div>
                                <div class="col-md-6">
                                    <input asp-for="q" class="search-text gray-background form-control" />
                                </div>
                            </div>
                            @await Component.InvokeAsync("Widget", new { widgetZone = "productsearch_page_basic" })
                            <div class="inputs reversed form-group row">
                                <input asp-for="adv" />
                                <label class="col-md-3 control-label" asp-for="adv">@T("Search.AdvancedSearch")</label>
                            </div>
                        </div>
                        <div class="advanced-search" id="advanced-search-block">
                            @if (Model.AvailableCategories.Count > 0)
                            {
                                <div class="form-group row">
                                    <div class="col-md-3">
                                        <label asp-for="cid">@T("Search.Category"):</label>
                                    </div>
                                    <div class="col-md-6">
                                        <select asp-for="cid" asp-items="Model.AvailableCategories"></select>
                                    </div>
                                </div>
                                <div class="inputs reversed form-group row">
                                    <input asp-for="isc" />
                                    <label class="col-md-3 control-label"  asp-for="isc">@T("Search.IncludeSubCategories")</label>
                                </div>
                            }
                            @if (Model.AvailableManufacturers.Count > 0)
                            {
                                <div class="inputs form-group row">
                                    <div class="col-md-3">
                                        <label asp-for="mid">@T("Search.Manufacturer"):</label>
                                    </div>
                                    <div class="col-md-6">
                                        <select asp-for="mid" asp-items="Model.AvailableManufacturers"></select>
                                    </div>
                                </div>
                            }
                            @if (Model.asv && Model.AvailableVendors.Count > 0)
                            {
                                <div class="inputs">
                                    <label asp-for="vid">@T("Search.Vendor"):</label>
                                    <select asp-for="vid" asp-items="Model.AvailableVendors"></select>
                                </div>
                            }
                            <div class="inputs form-group row">
                                <div class="col-md-4">
                                    <label>@T("Search.PriceRange"):</label>
                                </div>
                                <div class="col-md-8">
                                    <div class="price-range">
                                        <div class="row">
                                            <div class="col-md-2 col-xs-4">
                                                <label>
                                                    @T("Search.PriceRange.From")
                                                </label>
                                            </div>
                                            <div class="col-md-4 col-xs-8">
                                                <input asp-for="pf" class="price-from gray-input form-control" />
                                            </div>
                                            <div class="col-md-2 col-xs-4">
                                                <label>
                                                    @T("Search.PriceRange.To")
                                                </label>
                                            </div>
                                            <div class="col-md-4 col-xs-8">
                                                <input asp-for="pt" class="price-to gray-input form-control" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="inputs reversed form-group row">
                                <input asp-for="sid" />
                                <label class="col-md-3 control-label" asp-for="sid">@T("Search.SearchInDescriptions")</label>
                            </div>
                            @await Component.InvokeAsync("Widget", new { widgetZone = "productsearch_page_advanced" })
                        </div>
                    </div>
                    <div class="buttons clearfix">
                        <input type="submit" class="btn btn-primary" value="@T("Search.Button")" />
                    </div>
                </fieldset>
            </form>
        </div>
        <div class="product-selectors clearfix">

            @*view mode*@
            @if (Model.PagingFilteringContext.AllowProductViewModeChanging && Model.Products.Count > 0)
            {
                <div class="col-md-4 pull-text-center ">
                    <div class="row filtering-navigation-item filtering-navigation-item-one">
                        <div class="col-md-5 remove_right_padding">

                            <div class="breadcrumbs pull-right">
                                <ol class="breadcrumb">
                                    <li><a>@T("Catalog.ViewMode")</a></li>
                                </ol>
                            </div>
                        </div>
                        <div class="col-md-6 remove_left_padding form-two text-left">
                            <form class="pull-left">@Html.DropDownList("products-viewmode", Model.PagingFilteringContext.AvailableViewModes, new { @class = "", onchange = "setLocation(this.value);" })</form>
                        </div>
                    </div>
                </div>
            }
            @*sorting*@
            @if (Model.PagingFilteringContext.AllowProductSorting && Model.Products.Count > 0)
            {
                <div class="col-md-4 pull-text-center">
                    <div class="row  filtering-navigation-item filtering-navigation-item-two">
                        <div class="col-md-5 remove_right_padding">
                            <div class="breadcrumbs pull-right">
                                <ol class="breadcrumb">

                                    <li><a>@T("Catalog.OrderBy")</a></li>
                                </ol>
                            </div>
                        </div>
                        <div class="col-md-8 remove_left_padding form-two">
                            <form class="pull-left">@Html.DropDownList("products-orderby", Model.PagingFilteringContext.AvailableSortOptions, new { @class = "", onchange = "setLocation(this.value);" })</form>
                        </div>
                    </div>
                </div>
            }
            @*page size*@
            @if (Model.PagingFilteringContext.AllowCustomersToSelectPageSize && Model.Products.Count > 0)
            {
                <div class="col-md-4 pull-text-center">
                    <div class="row filtering-navigation-item filtering-navigation-item-three">

                        <div class="col-md-6 remove_right_padding ">
                            <div class="breadcrumbs pull-right">
                                <ol class="breadcrumb">
                                    <li><a>@T("Catalog.PageSize") @T("Catalog.PageSize.PerPage")</a></li>
                                </ol>
                            </div>
                        </div>
                        <div class="col-md-5 remove_left_padding remove_right_padding form-two customed-form-two pull-right">
                            <form class="pull-left">@Html.DropDownList("products-pagesize", Model.PagingFilteringContext.PageSizeOptions, new { @class = "", onchange = "setLocation(this.value);" })</form>
                        </div>

                    </div>
                </div>
            }
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = "productsearch_page_before_results" })
        <div class="search-results">
            @if (!string.IsNullOrEmpty(Model.Warning))
            {
                <div class="warning">
                    @Model.Warning
                </div>
            }
            @if (Model.NoResults)
            {
                <div class="no-result">
                    @T("Search.NoResultsText")
                </div>
            }
            @*product list*@
            @if (Model.Products.Count > 0)
            {
                if (Model.PagingFilteringContext.ViewMode == "list")
                {
                    @*list mode*@
                    <div class="product-list">

                        @foreach (var product in Model.Products)
                        {
                            <div class="row">


                                <div class="col-md-12">
                                    <div class="offer offer-default">
                                        @Html.Partial("_ProductBox", product)
                                    </div>
                                </div>
                            </div>


                        }
                    </div>
                }
                else
                {
                    @*grid mode*@

                    <div class="product-grid home-page-product-grid">
                        <div class="row ">

                            @foreach (var product in Model.Products)
                            {

                                <div class="col-md-4">
                                    <div class="offer offer-default silde-show-offer pull-text-center">
                                        @Html.Partial("_ProductBox", product)
                                    </div>
                                </div>

                            }
                        </div>
                    </div>


                }
            }
            @*@if (Model.Products.Count > 0)
        {
            <div class="@(Model.PagingFilteringContext.ViewMode == "list" ? "product-list" : "product-grid")">
                <div class="item-grid">
                    @foreach (var product in Model.Products)
                    {
                        <div class="item-box">
                            @await Html.PartialAsync("_ProductBox", product)
                        </div>
                    }
                </div>
            </div>
        }*@
            @{
                var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber").BooleanParameterName("adv").BooleanParameterName("isc").BooleanParameterName("sid").RenderEmptyParameters(true);
            }
            @if (!pager.IsEmpty())
            {
                <div class="pager">
                    @pager
                </div>
            }
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = "productsearch_page_after_results" })
    </div>
</div>

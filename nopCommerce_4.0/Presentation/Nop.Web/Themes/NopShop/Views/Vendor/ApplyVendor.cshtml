@model ApplyVendorModel
@using Nop.Web.Models.Vendors;
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.Vendors.Apply").Text);
    //page class
    Html.AppendPageCssClassParts("html-apply-vendor-page");
}
<div class="page apply-vendor-page">
    
        <h2 class="title text-center">@T("PageTitle.Vendors.Apply") </h2>
    
    <div class="page-body">
        @await Component.InvokeAsync("TopicBlock", new { systemName = "ApplyVendor" })
        @await Component.InvokeAsync("Widget", new { widgetZone = "applyvendor_top" })
        @if (Model.DisableFormInput)
        {
            <div class="result">
                @Model.Result
            </div>

        }
        else
        {
            <div class="custom-page-box-div">
            <form asp-route="ApplyVendorAccount" method="post" enctype="multipart/form-data">
                <div asp-validation-summary="ModelOnly" class="message-error"></div>
                <div class="fieldset">
                    <div class="form-fields">

                        <div class="form-group row">
                            <div class="col-md-2">
                                @Html.LabelFor(model => model.Name)
                            </div>
                            <div class="col-md-6">
                                @Html.TextBoxFor(model => model.Name, new { @class = "name gray-input", placeholder = T("Vendors.ApplyAccount.Name.Hint") })

                            </div>
                            <div class="col-md-4">
                                <nop-required />
                                @Html.ValidationMessageFor(model => model.Name)
                            </div>
                            </div>

                        <div class="form-group row">
                            <div class="col-md-2">
                                @Html.LabelFor(model => model.Email)
                            </div>
                            <div class="col-md-6">
                                @Html.TextBoxFor(model => model.Email, new { @class = "email gray-input", placeholder = T("Vendors.ApplyAccount.Email.Hint") })

                            </div>

                            <div class="col-md-4">
                                <nop-required />
                                @Html.ValidationMessageFor(model => model.Email)
                            </div>

                        </div>


                        @if (Model.DisplayCaptcha)
                        {
                            <div class="captcha-box">
                                @Html.Raw(Html.GenerateCaptcha())
                            </div>
                        }
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-12">
                        <div class="buttons pull-right">
                            <input type="submit" name="send-email" class="button-1 apply-vendor-button btn btn-primary" value="@T("Vendors.ApplyAccount.Button")" />
                        </div>
                    </div>

                </div>

        </form>
        </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = "applyvendor_bottom" })
    </div>
</div>
